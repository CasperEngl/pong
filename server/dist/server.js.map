{"version":3,"sources":["../src/server.js"],"names":["path","require","express","app","server","Server","io","listen","Player","id","points","players","playerCount","use","static","join","__dirname","get","req","res","sendFile","on","socket","console","log","emit","hello","length","JSON","stringify","data","playerMovement","x","y","forEach","key","value","map","player"],"mappings":"AAAA;AACA,MAAMA,OAAOC,QAAQ,MAAR,CAAb;;AAEA;AACA,MAAMC,UAAUD,QAAQ,SAAR,CAAhB;AACA;AACA,MAAME,MAAMD,SAAZ;AACA;AACA,MAAME,SAASH,QAAQ,MAAR,EAAgBI,MAAhB,CAAuBF,GAAvB,CAAf;AACA;AACA,MAAMG,KAAKL,QAAQ,WAAR,EAAqBG,MAArB,CAAX;;AAEA;AACAA,OAAOG,MAAP,CAAc,IAAd;;AAEA,SAASC,MAAT,CAAiBC,EAAjB,EAAqBC,SAAS,CAA9B,EAAiC;AAChC,MAAKD,EAAL,GAAUA,EAAV;AACA,MAAKC,MAAL,GAAcA,MAAd;AACA;;AAED,IAAIC,UAAU,EAAd;AAAA,IAAkBC,cAAc,CAAhC;;AAEA;AACAT,IAAIU,GAAJ,CAAQ,SAAR,EAAmBX,QAAQY,MAAR,CAAed,KAAKe,IAAL,CAAUC,SAAV,EAAqB,cAArB,CAAf,CAAnB;;AAEAb,IAAIc,GAAJ,CAAQ,GAAR,EAAa,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAChCA,KAAIC,QAAJ,CAAapB,KAAKe,IAAL,CAAUC,SAAV,EAAqB,kBAArB,CAAb;AACA,CAFD;;AAIAV,GAAGe,EAAH,CAAM,YAAN,EAAoB,UAAUC,MAAV,EAAkB;AACrCA,QAAOD,EAAP,CAAU,YAAV,EAAwB,YAAY;AACnCE,UAAQC,GAAR,CAAY,qBAAZ;AACAb,YAAU,EAAV;AACAC,gBAAc,CAAd;AACA,EAJD;;AAMAU,QAAOG,IAAP,CAAY,WAAZ,EAAyB;AACxBC,SAAO;AADiB,EAAzB;;AAIAJ,QAAOD,EAAP,CAAU,YAAV,EAAwB,YAAY;;AAEnC,MAAIV,QAAQgB,MAAR,IAAkB,CAAtB,EAAyB;AACxBhB,WAAQC,WAAR,IAAuB,IAAIJ,MAAJ,CAAWI,WAAX,CAAvB;;AAEAU,UAAOG,IAAP,CAAY,cAAZ,EAA4Bd,QAAQC,aAAR,CAA5B;AACA,GAJD,MAIO;AACNW,WAAQC,GAAR,CAAY,WAAZ;AACA;;AAEDD,UAAQC,GAAR,CAAYI,KAAKC,SAAL,CAAelB,OAAf,EAAwB,IAAxB,EAA8B,CAA9B,CAAZ;AACA,EAXD;;AAaAW,QAAOD,EAAP,CAAU,kBAAV,EAA8B,UAAUS,IAAV,EAAgB;AAC7CP,UAAQC,GAAR,CAAYM,IAAZ;AACA,EAFD;;AAIAR,QAAOD,EAAP,CAAU,gBAAV,EAA4B,UAAUS,IAAV,EAAgB;AAC3C,MAAIC,iBAAiB;AACpBtB,OAAIqB,KAAKrB,EADW;AAEpBuB,MAAGF,KAAKE,CAFY;AAGpBC,MAAGH,KAAKG;AAHY,GAArB;;AAMAX,SAAOG,IAAP,CAAY,kBAAZ,EAAgCM,cAAhC;AACA,EARD;;AAUAT,QAAOD,EAAP,CAAU,aAAV,EAAyB,UAAUS,IAAV,EAAgB;AACxCnB,UAAQuB,OAAR,CAAgB,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC/B,OAAIN,KAAKrB,EAAL,KAAY2B,KAAhB,EACCzB,QAAQmB,KAAKrB,EAAb,EAAiBC,MAAjB;AACD,GAHD;AAIA,EALD;;AAOAY,QAAOD,EAAP,CAAU,WAAV,EAAuB,YAAY;AAClCV,UAAQ0B,GAAR,CAAYC,UAAUA,OAAO5B,MAAP,GAAgB,CAAtC;AACA,EAFD;;AAIAY,QAAOD,EAAP,CAAU,cAAV,EAA0B,UAAUS,IAAV,EAAgB,CAEzC,CAFD;AAGA,CApDD;;AAuDA;;AAEA","file":"server.js","sourcesContent":["// Define path\nconst path = require('path');\n\n// Define express\nconst express = require('express');\n// Initialize express\nconst app = express();\n// Create HTTP server\nconst server = require('http').Server(app);\n// Initialize socket.io on HTTP server\nconst io = require('socket.io')(server);\n\n// Listen on port\nserver.listen(7777);\n\nfunction Player (id, points = 0) {\n\tthis.id = id;\n\tthis.points = points;\n}\n\nlet players = [], playerCount = 0;\n\n// Set static file serving\napp.use('/assets', express.static(path.join(__dirname, '../../assets')));\n\napp.get('/', function (req, res) {\n\tres.sendFile(path.join(__dirname, '../../index.html'));\n});\n\nio.on('connection', function (socket) {\n\tsocket.on('disconnect', function () {\n\t\tconsole.log('player disconnected');\n\t\tplayers = [];\n\t\tplayerCount = 0;\n\t});\n\n\tsocket.emit('gameStart', {\n\t\thello: 'world'\n\t});\n\n\tsocket.on('playerJoin', function () {\n\n\t\tif (players.length <= 1) {\n\t\t\tplayers[playerCount] = new Player(playerCount);\n\n\t\t\tsocket.emit('playerJoined', players[playerCount++]);\n\t\t} else {\n\t\t\tconsole.log('Room full');\n\t\t}\n\n\t\tconsole.log(JSON.stringify(players, null, 2));\n\t});\n\n\tsocket.on('playerDisconnect', function (data) {\n\t\tconsole.log(data);\n\t});\n\n\tsocket.on('playerMovement', function (data) {\n\t\tlet playerMovement = {\n\t\t\tid: data.id,\n\t\t\tx: data.x,\n\t\t\ty: data.y\n\t\t};\n\n\t\tsocket.emit('opponentMovement', playerMovement);\n\t});\n\n\tsocket.on('playerPoint', function (data) {\n\t\tplayers.forEach((key, value) => {\n\t\t\tif (data.id === value)\n\t\t\t\tplayers[data.id].points++;\n\t\t});\n\t});\n\n\tsocket.on('resetGame', function () {\n\t\tplayers.map(player => player.points = 0);\n\t});\n\n\tsocket.on('ballMovement', function (data) {\n\n\t});\n});\n\n\n/////////////////////////////////////////////////////////////\n\n/*\nvar socket = require('socket.io');\nvar express = require('express');\nvar http = require('http');\n\nvar app = express();\nvar server = http.createServer(app);\nserver.listen(7777, '127.0.0.1');\n\nvar io = socket.listen(server);\n\nconst path = require('path');\n\napp.use('/assets', express.static(path.join(__dirname, './assets')));\n\napp.get('/', function (req, res) {\n\tres.sendFile(__dirname + '/index.html');\n});\n\nio.on('connection', function (socket) {\n\tsocket.emit('gameStart', {\n\t\thello: 'world'\n\t});\n\n\tsocket.on('playerMovement', function (data) {\n\t\tconsole.log(data);\n\t});\n});\n*/"]}